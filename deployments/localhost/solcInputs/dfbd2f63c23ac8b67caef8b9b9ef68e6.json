{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/exampleContracts/FunWithStorage.sol": {
      "content": "// // SPDX-License-Identifier: MIT\r\n// pragma solidity ^0.8.7;\r\n\r\n// contract FunWithStorage {\r\n//     uint256 favoriteNumber;\r\n//     bool someBool;\r\n//     uint256[] myArray;\r\n//     mapping(uint256 => bool) myMap;\r\n//     uint256 constant NOT_IN_STORAGE = 123;\r\n//     uint256 immutable i_not_in_storage;\r\n\r\n//     constructor() {\r\n//         favoriteNumber = 25;\r\n//         someBool = true;\r\n//         myArray.push(222);\r\n//         myMap[0] = true;\r\n//         i_not_in_storage = 123;\r\n//     }\r\n\r\n//     function doStuff() public {\r\n//         uint256 newVar = favoriteNumber + 1;\r\n//         bool otherVar = someBool;\r\n//     }\r\n// }\r\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror NotOwner();\r\n\r\ncontract FundMe {\r\n    using PriceConverter for uint256;\r\n\r\n    mapping(address => uint256) private s_addressToAmountFunded;\r\n\r\n    address[] private s_funders;\r\n    address private i_owner;\r\n\r\n    AggregatorV3Interface public s_priceFeed; \r\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender;\r\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function fund() public payable {\r\n        require(\r\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\r\n            \"You need to spend more ETH!\"\r\n        );\r\n        s_addressToAmountFunded[msg.sender] += msg.value;\r\n        s_funders.push(msg.sender);\r\n    }\r\n\r\n    function getVersion() public view returns (uint256) {\r\n        return s_priceFeed.version(); \r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != i_owner) revert NotOwner();\r\n        _;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        for (uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++) {\r\n            address funder = s_funders[funderIndex];\r\n            s_addressToAmountFunded[funder] = 0;\r\n        }\r\n        s_funders = new address[](0);\r\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(callSuccess, \"Failed to withdraw!\");\r\n    }\r\n\r\n\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return i_owner;\r\n    }\r\n\r\n    function getFunder(uint256 index) public view returns(address){\r\n        return s_funders[index];    \r\n    }\r\n\r\n    function getAddressToAmountFunded(address funder) public view returns(uint256) {\r\n        return s_addressToAmountFunded[funder];\r\n    }\r\n}\r\n"
    },
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.7;\n\n//import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n  function getPrice(AggregatorV3Interface priceFeed)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n    return uint256(answer * 10000000000);\r\n  }\r\n\r\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 ethPrice = getPrice(priceFeed);\r\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\r\n    return ethAmountInUsd;\r\n  }\r\n}"
    },
    "contracts/test/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0; // Changed to 0.8.0 to match your project\r\n\r\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract MockV3Aggregator is AggregatorV3Interface {\r\n    uint8 public immutable override decimals;\r\n    int256 private s_answer;\r\n    uint256 private s_version = 4;\r\n    \r\n    constructor(uint8 _decimals, int256 _initialAnswer) {\r\n        decimals = _decimals;\r\n        s_answer = _initialAnswer;\r\n    }\r\n\r\n    function description() external pure override returns (string memory) {\r\n        return \"Mock V3 Aggregator\";\r\n    }\r\n\r\n    function version() external view override returns (uint256) {\r\n        return s_version;\r\n    }\r\n\r\n    function getRoundData(uint80)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        return (0, s_answer, block.timestamp, block.timestamp, 0);\r\n    }\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        return (0, s_answer, block.timestamp, block.timestamp, 0);\r\n    }\r\n\r\n    function updateAnswer(int256 newAnswer) external {\r\n        s_answer = newAnswer;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}